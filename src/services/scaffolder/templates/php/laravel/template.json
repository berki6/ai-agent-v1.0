{
  "name": "Laravel Framework",
  "description": "A PHP web framework with expressive, elegant syntax for building modern web applications",
  "language": "php",
  "framework": "laravel",
  "project_type": "web",
  "directories": [
    "app",
    "app/Http",
    "app/Http/Controllers",
    "app/Http/Middleware",
    "app/Models",
    "app/Services",
    "app/Exceptions",
    "bootstrap",
    "config",
    "database",
    "database/migrations",
    "database/seeders",
    "public",
    "resources",
    "resources/views",
    "resources/js",
    "resources/css",
    "resources/lang",
    "routes",
    "storage",
    "storage/app",
    "storage/framework",
    "storage/logs",
    "tests",
    "tests/Feature",
    "tests/Unit"
  ],
  "files": {
    "composer.json": {
      "content": "{\n    \"name\": \"{{project_name | replace('-', '')}}/{{project_name}}\",\n    \"type\": \"project\",\n    \"description\": \"A Laravel application\",\n    \"keywords\": [\"laravel\", \"framework\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"laravel/framework\": \"^11.0\",\n        \"laravel/tinker\": \"^2.9\",\n        \"guzzlehttp/guzzle\": \"^7.2\",\n        \"laravel/sanctum\": \"^4.0\",\n        \"laravel/ui\": \"^4.2\",\n        \"spatie/laravel-permission\": \"^6.0\",\n        \"barryvdh/laravel-debugbar\": \"^3.9\",\n        \"predis/predis\": \"^2.0\"\n    },\n    \"require-dev\": {\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"laravel/pint\": \"^1.0\",\n        \"laravel/sail\": \"^1.18\",\n        \"mockery/mockery\": \"^1.4.4\",\n        \"nunomaduro/collision\": \"^8.0\",\n        \"phpunit/phpunit\": \"^11.0.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"Database\\\\Factories\\\\\": \"database/factories/\",\n            \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n        \"post-update-cmd\": \"@php artisan vendor:publish --tag=laravel-assets --ansi --force\",\n        \"post-root-package-install\": \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\",\n        \"post-create-project-cmd\": \"@php artisan key:generate --ansi --show\"\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": []\n        }\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true,\n            \"php-http/discovery\": true\n        }\n    },\n    \"minimum-stability\": \"stable\",\n    \"prefer-stable\": true\n}\n",
      "description": "Composer configuration file for Laravel"
    },
    "artisan": {
      "content": "#!/usr/bin/env php\n<?php\n\ndefine('LARAVEL_START', microtime(true));\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader\n| for our application. We just need to utilize it! We'll require it\n| into the script here so that we do not have to worry about the\n| loading of any our classes \"manually\". Feels great to relax.\n|\n*/\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n/*\n|--------------------------------------------------------------------------\n| Run The Artisan Application\n|--------------------------------------------------------------------------\n|\n| When we run the console application, the current CLI command will be\n| executed in this console and the response sent back to a terminal\n| or another output device for the developers. Here goes nothing!\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\\Component\\Console\\Input\\ArgvInput,\n    new Symfony\\Component\\Console\\Output\\ConsoleOutput\n);\n\n/*\n|--------------------------------------------------------------------------\n| Shutdown The Application\n|--------------------------------------------------------------------------\n|\n| Once Artisan has finished running, we will fire off the shutdown events\n| so that any final work may be done by the application before we shut\n| down the process. This is the last thing to happen to the request.\n|\n*/\n\n$kernel->terminate($input, $status);\n\nexit($status);\n",
      "description": "Laravel Artisan command-line interface"
    },
    "app/Http/Controllers/Controller.php": {
      "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\nuse Illuminate\\Foundation\\Bus\\DispatchesJobs;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Routing\\Controller as BaseController;\n\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, ValidatesRequests, DispatchesJobs;\n}\n",
      "description": "Base controller class"
    },
    "app/Http/Controllers/HealthController.php": {
      "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\n\nclass HealthController extends Controller\n{\n    public function index(): JsonResponse\n    {\n        return response()->json([\n            'status' => 'healthy',\n            'timestamp' => now()->toISOString(),\n            'service' => '{{project_name}}',\n            'framework' => 'Laravel',\n            'language' => 'PHP',\n        ]);\n    }\n\n    public function detailed(): JsonResponse\n    {\n        return response()->json([\n            'status' => 'healthy',\n            'timestamp' => now()->toISOString(),\n            'service' => '{{project_name}}',\n            'version' => '1.0.0',\n            'php_version' => PHP_VERSION,\n            'laravel_version' => app()->version(),\n            'environment' => app()->environment(),\n            'uptime' => time() - LARAVEL_START,\n        ]);\n    }\n}\n",
      "description": "Health check controller"
    },
    "app/Http/Controllers/WelcomeController.php": {
      "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\JsonResponse;\n\nclass WelcomeController extends Controller\n{\n    public function index(): JsonResponse\n    {\n        return response()->json([\n            'message' => 'Welcome to {{project_name}} API',\n            'framework' => 'Laravel',\n            'language' => 'PHP',\n            'timestamp' => now()->toISOString(),\n        ]);\n    }\n}\n",
      "description": "Welcome controller"
    },
    "app/Models/User.php": {
      "content": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Sanctum\\HasApiTokens;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable, HasRoles;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n        'username',\n        'is_active',\n    ];\n\n    /**\n     * The attributes that should be hidden for serialization.\n     *\n     * @var array<int, string>\n     */\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     */\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n        'password' => 'hashed',\n        'is_active' => 'boolean',\n    ];\n\n    /**\n     * Get the user's full name.\n     */\n    public function getFullNameAttribute(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Check if user is active.\n     */\n    public function isActive(): bool\n    {\n        return $this->is_active;\n    }\n}\n",
      "description": "User model with authentication and roles"
    },
    "app/Services/UserService.php": {
      "content": "<?php\n\nnamespace App\\Services;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Pagination\\LengthAwarePaginator;\n\nclass UserService\n{\n    public function getAllUsers(int $perPage = 15): LengthAwarePaginator\n    {\n        return User::paginate($perPage);\n    }\n\n    public function getUserById(int $id): ?User\n    {\n        return User::find($id);\n    }\n\n    public function getUserByUsername(string $username): ?User\n    {\n        return User::where('username', $username)->first();\n    }\n\n    public function createUser(array $data): User\n    {\n        return User::create($data);\n    }\n\n    public function updateUser(int $id, array $data): ?User\n    {\n        $user = User::find($id);\n        if ($user) {\n            $user->update($data);\n            return $user;\n        }\n        return null;\n    }\n\n    public function deleteUser(int $id): bool\n    {\n        $user = User::find($id);\n        return $user ? $user->delete() : false;\n    }\n\n    public function userExists(string $username): bool\n    {\n        return User::where('username', $username)->exists();\n    }\n}\n",
      "description": "User service with business logic"
    },
    "routes/api.php": {
      "content": "<?php\n\nuse App\\Http\\Controllers\\HealthController;\nuse App\\Http\\Controllers\\WelcomeController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\n/*\n|--------------------------------------------------------------------------\n| API Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register API routes for your application. These\n| routes are loaded by the RouteServiceProvider and all of them will\n| be assigned to the \"api\" middleware group. Make something great!\n|\n*/\n\nRoute::middleware('auth:sanctum')->get('/user', function (Request $request) {\n    return $request->user();\n});\n\nRoute::prefix('v1')->group(function () {\n    Route::get('/', [WelcomeController::class, 'index']);\n    Route::get('/health', [HealthController::class, 'index']);\n    Route::get('/health/detailed', [HealthController::class, 'detailed']);\n});\n",
      "description": "API routes configuration"
    },
    "routes/web.php": {
      "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider and all of them will\n| be assigned to the \"web\" middleware group. Make something great!\n|\n*/\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n",
      "description": "Web routes configuration"
    },
    "database/migrations/2014_10_12_000000_create_users_table.php": {
      "content": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('username')->unique();\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->boolean('is_active')->default(true);\n            $table->rememberToken();\n            $table->timestamps();\n        });\n\n        Schema::create('password_reset_tokens', function (Blueprint $table) {\n            $table->string('email')->primary();\n            $table->string('token');\n            $table->timestamp('created_at')->nullable();\n        });\n\n        Schema::create('sessions', function (Blueprint $table) {\n            $table->string('id')->primary();\n            $table->foreignId('user_id')->nullable()->index();\n            $table->string('ip_address', 45)->nullable();\n            $table->text('user_agent')->nullable();\n            $table->longText('payload');\n            $table->integer('last_activity')->index();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('users');\n        Schema::dropIfExists('password_reset_tokens');\n        Schema::dropIfExists('sessions');\n    }\n};\n",
      "description": "Users table migration"
    },
    "config/app.php": {
      "content": "<?php\n\nuse Illuminate\\Support\\Facades\\Facade;\nuse Illuminate\\Support\\ServiceProvider;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Name\n    |--------------------------------------------------------------------------\n    |\n    | This value is the name of your application, which will be used when the\n    | framework needs to place the application's name in a notification or\n    | other UI elements where an application name needs to be displayed.\n    |\n    */\n\n    'name' => env('APP_NAME', '{{project_name}}'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Environment\n    |--------------------------------------------------------------------------\n    |\n    | This value determines the \"environment\" your application is currently\n    | running in. This may determine how you prefer to configure various\n    | services the application utilizes. Set this in your \".env\" file.\n    |\n    */\n\n    'env' => env('APP_ENV', 'production'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Debug Mode\n    |--------------------------------------------------------------------------\n    |\n    | When your application is in debug mode, detailed error messages with\n    | stack traces will be shown on every error that occurs within your\n    | application. If disabled, a simple generic error page is shown.\n    |\n    */\n\n    'debug' => (bool) env('APP_DEBUG', false),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application URL\n    |--------------------------------------------------------------------------\n    |\n    | This URL is used by the console to properly generate URLs when using\n    | the Artisan command line tool. You should set this to the root of\n    | the application so that it's available within Artisan commands.\n    |\n    */\n\n    'url' => env('APP_URL', 'http://localhost'),\n\n    'timezone' => env('APP_TIMEZONE', 'UTC'),\n\n    'locale' => env('APP_LOCALE', 'en'),\n\n    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),\n\n    'key' => env('APP_KEY'),\n\n    'cipher' => 'AES-256-CBC',\n\n    'maintenance' => [\n        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),\n        'store' => env('APP_MAINTENANCE_STORE'),\n    ],\n\n];\n",
      "description": "Application configuration"
    },
    "config/database.php": {
      "content": "<?php\n\nuse Illuminate\\Support\\Str;\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Database Connection Name\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify which of the database connections below you wish\n    | to use as your default connection for all database work. Of course\n    | you may use many connections at once using the Database library.\n    |\n    */\n\n    'default' => env('DB_CONNECTION', 'sqlite'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Database Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here are each of the database connections setup for your application.\n    | Of course, examples of configuring each database platform that is\n    | supported by Laravel is shown below to make development simple.\n    |\n    |\n    | All database work in Laravel is done through the PHP PDO facilities\n    | so make sure you have the driver for your particular database of\n    | choice installed on your machine before you begin development.\n    |\n    */\n\n    'connections' => [\n\n        'sqlite' => [\n            'driver' => 'sqlite',\n            'url' => env('DATABASE_URL'),\n            'database' => env('DB_DATABASE', database_path('database.sqlite')),\n            'prefix' => '',\n            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),\n        ],\n\n        'mysql' => [\n            'driver' => 'mysql',\n            'url' => env('DATABASE_URL'),\n            'host' => env('DB_HOST', '127.0.0.1'),\n            'port' => env('DB_PORT', '3306'),\n            'database' => env('DB_DATABASE', 'laravel'),\n            'username' => env('DB_USERNAME', 'root'),\n            'password' => env('DB_PASSWORD', ''),\n            'unix_socket' => env('DB_SOCKET', ''),\n            'charset' => 'utf8mb4',\n            'collation' => 'utf8mb4_unicode_ci',\n            'prefix' => '',\n            'prefix_indexes' => true,\n            'strict' => true,\n            'engine' => null,\n            'options' => extension_loaded('pdo_mysql') ? array_filter([\n                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n            ]) : [],\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Migration Repository Table\n    |--------------------------------------------------------------------------\n    |\n    | This table keeps track of all the migrations that have already run for\n    | your application. Using this information, we can determine which of\n    | the migrations on disk haven't actually been run in the database.\n    |\n    */\n\n    'migrations' => 'migrations',\n\n];\n",
      "description": "Database configuration"
    },
    "resources/views/welcome.blade.php": {
      "content": "<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{{project_name}}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"antialiased\">\n    <div class=\"container py-4\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-8\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h1 class=\"h3 mb-0\">Welcome to {{project_name}}</h1>\n                    </div>\n                    <div class=\"card-body\">\n                        <p class=\"lead\">Built with Laravel Framework in PHP</p>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <h5>API Endpoints</h5>\n                                <ul class=\"list-group list-group-flush\">\n                                    <li class=\"list-group-item\"><a href=\"/api/v1/\">Welcome API</a></li>\n                                    <li class=\"list-group-item\"><a href=\"/api/v1/health\">Health Check</a></li>\n                                    <li class=\"list-group-item\"><a href=\"/api/v1/health/detailed\">Detailed Health</a></li>\n                                </ul>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <h5>Features</h5>\n                                <ul class=\"list-unstyled\">\n                                    <li>✓ Laravel 11.x</li>\n                                    <li>✓ PHP 8.2+</li>\n                                    <li>✓ RESTful API</li>\n                                    <li>✓ Authentication</li>\n                                    <li>✓ Role-based permissions</li>\n                                    <li>✓ SQLite database</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n",
      "description": "Welcome page view"
    },
    ".env.example": {
      "content": "APP_NAME={{project_name}}\nAPP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_TIMEZONE=UTC\nAPP_URL=http://localhost\n\nAPP_LOCALE=en\nAPP_FALLBACK_LOCALE=en\nAPP_FAKER_LOCALE=en_US\n\nAPP_MAINTENANCE_DRIVER=file\nAPP_MAINTENANCE_STORE=database\n\nBCRYPT_ROUNDS=12\n\nLOG_CHANNEL=stack\nLOG_STACK=single\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=sqlite\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=database/database.sqlite\nDB_USERNAME=root\nDB_PASSWORD=\n\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\nSESSION_ENCRYPT=false\nSESSION_PATH=/\nSESSION_DOMAIN=null\n\nBROADCAST_CONNECTION=log\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=database\n\nCACHE_STORE=database\nCACHE_PREFIX=\n\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_CLIENT=phpredis\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=log\nMAIL_HOST=127.0.0.1\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=\"hello@example.com\"\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nVITE_APP_NAME=\"${APP_NAME}\"\n",
      "description": "Environment variables example"
    },
    "phpunit.xml": {
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"./vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Unit\">\n            <directory suffix=\"Test.php\">./tests/Unit</directory>\n        </testsuite>\n        <testsuite name=\"Feature\">\n            <directory suffix=\"Test.php\">./tests/Feature</directory>\n        </testsuite>\n    </testsuites>\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">./app</directory>\n        </include>\n    </coverage>\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <env name=\"BCRYPT_ROUNDS\" value=\"4\"/>\n        <env name=\"CACHE_STORE\" value=\"array\"/>\n        <env name=\"DB_CONNECTION\" value=\"sqlite\"/>\n        <env name=\"DB_DATABASE\" value=\":memory:\"/>\n        <env name=\"MAIL_MAILER\" value=\"array\"/>\n        <env name=\"QUEUE_CONNECTION\" value=\"sync\"/>\n        <env name=\"SESSION_DRIVER\" value=\"array\"/>\n        <env name=\"TELESCOPE_ENABLED\" value=\"false\"/>\n    </php>\n</phpunit>\n",
      "description": "PHPUnit configuration"
    },
    "README.md": {
      "content": "# {{project_name}}\n\nA web application built with Laravel framework in PHP.\n\n## Features\n\n- Laravel 11.x with PHP 8.2+\n- RESTful API with authentication\n- Role-based permissions (Spatie Laravel Permission)\n- SQLite database for development\n- MySQL/PostgreSQL support for production\n- Laravel Sanctum for API authentication\n- Debug bar for development\n- Comprehensive testing setup\n\n## Getting Started\n\n### Prerequisites\n\n- PHP 8.2 or higher\n- Composer\n- SQLite (or MySQL/PostgreSQL for production)\n\n### Installation\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   composer install\n   ```\n3. Copy environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Generate application key:\n   ```bash\n   php artisan key:generate\n   ```\n5. Run migrations:\n   ```bash\n   php artisan migrate\n   ```\n6. Start the development server:\n   ```bash\n   php artisan serve\n   ```\n\n### API Endpoints\n\n- `GET /api/v1/` - Welcome message\n- `GET /api/v1/health` - Health check\n- `GET /api/v1/health/detailed` - Detailed health check\n\n## Project Structure\n\n```\n.\n├── app/                     # Application code\n│   ├── Http/Controllers/    # HTTP controllers\n│   ├── Models/              # Eloquent models\n│   ├── Services/            # Business logic services\n│   └── Exceptions/          # Custom exceptions\n├── bootstrap/               # Application bootstrap\n├── config/                  # Configuration files\n├── database/                # Database migrations and seeds\n│   ├── migrations/          # Database migrations\n│   └── seeders/             # Database seeders\n├── public/                  # Public web assets\n├── resources/               # Views and assets\n│   ├── views/               # Blade templates\n│   ├── js/                  # JavaScript files\n│   └── css/                 # CSS files\n├── routes/                  # Route definitions\n├── storage/                 # File storage\n├── tests/                   # Test files\n└── composer.json            # Composer configuration\n```\n\n## Development\n\n### Running Tests\n\n```bash\nphp artisan test\n```\n\n### Code Analysis\n\n```bash\n./vendor/bin/pint\n```\n\n### Database Operations\n\n```bash\nphp artisan migrate\nphp artisan db:seed\n```\n\n## Configuration\n\nUpdate `.env` file with your database and other configuration settings.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "description": "Project README with setup and usage instructions"
    },
    "Makefile": {
      "content": "# Makefile for {{project_name}}\n\n.PHONY: install serve test migrate seed clean key\n\n# Install dependencies\ninstall:\n\tcomposer install\n\n# Start development server\nserve:\n\tphp artisan serve\n\n# Run tests\ntest:\n\tphp artisan test\n\n# Run migrations\nmigrate:\n\tphp artisan migrate\n\n# Run seeders\nseed:\n\tphp artisan db:seed\n\n# Generate application key\nkey:\n\tphp artisan key:generate\n\n# Clean vendor directory\nclean:\n\trm -rf vendor\n\n# Full setup\nsetup: install key migrate seed\n",
      "description": "Makefile with common development tasks"
    }
  },
  "dependencies": {
    "package_manager": "composer",
    "dependencies": [
      "laravel/framework",
      "laravel/tinker",
      "guzzlehttp/guzzle",
      "laravel/sanctum",
      "laravel/ui",
      "spatie/laravel-permission",
      "barryvdh/laravel-debugbar",
      "predis/predis"
    ],
    "dev_dependencies": [
      "fakerphp/faker",
      "laravel/pint",
      "laravel/sail",
      "mockery/mockery",
      "nunomaduro/collision",
      "phpunit/phpunit"
    ]
  },
  "scripts": {
    "start": "php artisan serve",
    "install": "composer install",
    "test": "php artisan test",
    "migrate": "php artisan migrate",
    "seed": "php artisan db:seed",
    "key": "php artisan key:generate",
    "clean": "rm -rf vendor"
  }
}
