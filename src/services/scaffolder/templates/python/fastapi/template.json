{
  "name": "FastAPI Web API",
  "description": "A high-performance, async-ready web API using FastAPI framework",
  "language": "python",
  "framework": "fastapi",
  "project_type": "api",
  "directories": [
    "app",
    "app/api",
    "app/core",
    "app/models",
    "app/schemas",
    "app/services",
    "tests",
    "docs"
  ],
  "files": {
    "app/__init__.py": {
      "content": "",
      "description": "Python package initialization"
    },
    "app/main.py": {
      "content": "from fastapi import FastAPI\nfrom app.api.routes import router\n\napp = FastAPI(\n    title=\"{{project_name}}\",\n    description=\"API generated by CodeForge AI\",\n    version=\"1.0.0\"\n)\n\napp.include_router(router)\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"healthy\"}\n",
      "description": "Main FastAPI application entry point"
    },
    "app/api/__init__.py": {
      "content": "",
      "description": "API package initialization"
    },
    "app/api/routes.py": {
      "content": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to {{project_name}} API\"}\n",
      "description": "API routes definition"
    },
    "app/core/__init__.py": {
      "content": "",
      "description": "Core package initialization"
    },
    "app/core/config.py": {
      "content": "import os\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    app_name: str = \"{{project_name}}\"\n    debug: bool = False\n    database_url: str = \"sqlite:///./{{project_name}}.db\"\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n",
      "description": "Application configuration settings"
    },
    "app/models/__init__.py": {
      "content": "",
      "description": "Models package initialization"
    },
    "app/schemas/__init__.py": {
      "content": "",
      "description": "Schemas package initialization"
    },
    "app/services/__init__.py": {
      "content": "",
      "description": "Services package initialization"
    },
    "requirements.txt": {
      "content": "fastapi==0.104.1\nuvicorn[standard]==0.24.0\npydantic==2.5.0\n",
      "description": "Python dependencies"
    },
    "README.md": {
      "content": "# {{project_name}}\n\nA FastAPI web API generated by CodeForge AI.\n\n## Features\n\n- FastAPI framework for high-performance async APIs\n- Pydantic for data validation\n- Modular architecture with separate layers\n- Health check endpoint\n\n## Installation\n\n```bash\npip install -r requirements.txt\n```\n\n## Running\n\n```bash\nuvicorn app.main:app --reload\n```\n\n## API Documentation\n\nVisit `http://localhost:8000/docs` for interactive API documentation.\n",
      "description": "Project README with setup instructions"
    },
    ".gitignore": {
      "content": "# Python\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv\nvenv/\n.venv/\n\n# IDE\n.vscode/\n.idea/\n\n# OS\n.DS_Store\nThumbs.db\n\n# Database\n*.db\n*.sqlite\n*.sqlite3\n\n# Environment\n.env\n.env.local\n",
      "description": "Git ignore patterns"
    },
    "tests/__init__.py": {
      "content": "",
      "description": "Tests package initialization"
    },
    "tests/test_main.py": {
      "content": "from fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_health_check():\n    response = client.get(\"/health\")\n    assert response.status_code == 200\n    assert response.json() == {\"status\": \"healthy\"}\n\ndef test_root():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert \"message\" in response.json()\n",
      "description": "Basic API tests"
    }
  },
  "dependencies": {
    "package_manager": "pip",
    "dependencies": [
      "fastapi==0.104.1",
      "uvicorn[standard]==0.24.0",
      "pydantic==2.5.0"
    ],
    "dev_dependencies": [
      "pytest==7.4.3",
      "pytest-asyncio==0.21.1",
      "httpx==0.25.2",
      "black==23.11.0",
      "isort==5.12.0"
    ]
  },
  "scripts": {
    "start": "uvicorn app.main:app --reload",
    "dev": "uvicorn app.main:app --reload --host 0.0.0.0 --port 8000",
    "test": "pytest",
    "format": "black . && isort .",
    "lint": "black --check . && isort --check-only ."
  },
  "configuration": {
    "additional_setup_steps": [
      "Create virtual environment: python -m venv venv",
      "Activate virtual environment: venv\\Scripts\\activate (Windows) or source venv/bin/activate (Unix)",
      "Install dependencies: pip install -r requirements.txt",
      "Run development server: make dev",
      "Run tests: make test"
    ]
  }
}
