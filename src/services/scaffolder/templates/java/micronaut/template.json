{
  "name": "Micronaut Framework",
  "description": "A modern, JVM-based, full-stack framework for building modular, easily testable microservice applications",
  "language": "java",
  "framework": "micronaut",
  "project_type": "web",
  "directories": [
    "src/main/java/{{project_name | replace('-', '')}}",
    "src/main/java/{{project_name | replace('-', '')}}/controller",
    "src/main/java/{{project_name | replace('-', '')}}/service",
    "src/main/java/{{project_name | replace('-', '')}}/model",
    "src/main/java/{{project_name | replace('-', '')}}/config",
    "src/main/java/{{project_name | replace('-', '')}}/client",
    "src/main/java/{{project_name | replace('-', '')}}/repository",
    "src/main/resources",
    "src/test/java/{{project_name | replace('-', '')}}"
  ],
  "files": {
    "pom.xml": {
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>{{project_name | replace('-', '')}}</groupId>\n    <artifactId>{{project_name}}</artifactId>\n    <version>0.1</version>\n    <packaging>${packaging}</packaging>\n\n    <parent>\n        <groupId>io.micronaut</groupId>\n        <artifactId>micronaut-parent</artifactId>\n        <version>4.3.7</version>\n    </parent>\n\n    <properties>\n        <packaging>jar</packaging>\n        <jdk.version>17</jdk.version>\n        <release.version>17</release.version>\n        <micronaut.version>4.3.7</micronaut.version>\n        <micronaut.runtime>netty</micronaut.runtime>\n        <exec.mainClass>{{project_name | replace('-', '')}}.Application</exec.mainClass>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>central</id>\n            <url>https://repo.maven.apache.org/maven2</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-http-server-netty</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-http-client</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-jackson-databind</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut.data</groupId>\n            <artifactId>micronaut-data-jdbc</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut.sql</groupId>\n            <artifactId>micronaut-jdbc-hikari</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-runtime</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.annotation</groupId>\n            <artifactId>jakarta.annotation-api</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut</groupId>\n            <artifactId>micronaut-validation</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micronaut.test</groupId>\n            <artifactId>micronaut-test-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>io.micronaut.build</groupId>\n                <artifactId>micronaut-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>io.micronaut</groupId>\n                            <artifactId>micronaut-http-validation</artifactId>\n                            <version>${micronaut.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n",
      "description": "Maven POM file with Micronaut dependencies"
    },
    "src/main/java/{{project_name | replace('-', '')}}/Application.java": {
      "content": "package {{project_name | replace('-', '')}};\n\nimport io.micronaut.runtime.Micronaut;\n\npublic class Application {\n\n    public static void main(String[] args) {\n        Micronaut.run(Application.class, args);\n    }\n}\n",
      "description": "Main Micronaut application class"
    },
    "src/main/java/{{project_name | replace('-', '')}}/controller/HealthController.java": {
      "content": "package {{project_name | replace('-', '')}}.controller;\n\nimport io.micronaut.http.HttpResponse;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\n\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Controller(\"/api/v1\")\npublic class HealthController {\n\n    @Get(\"/health\")\n    public HttpResponse<Map<String, Object>> health() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"status\", \"healthy\");\n        response.put(\"timestamp\", LocalDateTime.now());\n        response.put(\"service\", \"{{project_name}}\");\n        return HttpResponse.ok(response);\n    }\n\n    @Get(\"/health/detailed\")\n    public HttpResponse<Map<String, Object>> detailedHealth() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"status\", \"healthy\");\n        response.put(\"timestamp\", LocalDateTime.now());\n        response.put(\"service\", \"{{project_name}}\");\n        response.put(\"version\", \"1.0.0\");\n        response.put(\"javaVersion\", System.getProperty(\"java.version\"));\n        response.put(\"micronautVersion\", \"4.3.7\");\n        return HttpResponse.ok(response);\n    }\n}\n",
      "description": "Health check controller for Micronaut"
    },
    "src/main/java/{{project_name | replace('-', '')}}/controller/WelcomeController.java": {
      "content": "package {{project_name | replace('-', '')}}.controller;\n\nimport io.micronaut.http.HttpResponse;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Controller(\"/api/v1\")\npublic class WelcomeController {\n\n    @Get(\"/\")\n    public HttpResponse<Map<String, Object>> welcome() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"message\", \"Welcome to {{project_name}} API\");\n        response.put(\"framework\", \"Micronaut\");\n        response.put(\"language\", \"Java\");\n        return HttpResponse.ok(response);\n    }\n}\n",
      "description": "Welcome controller for Micronaut"
    },
    "src/main/java/{{project_name | replace('-', '')}}/model/BaseEntity.java": {
      "content": "package {{project_name | replace('-', '')}}.model;\n\nimport io.micronaut.data.annotation.DateCreated;\nimport io.micronaut.data.annotation.DateUpdated;\nimport io.micronaut.data.annotation.Id;\nimport io.micronaut.data.annotation.MappedEntity;\n\nimport java.time.LocalDateTime;\n\n@MappedEntity\npublic abstract class BaseEntity {\n\n    @Id\n    private Long id;\n\n    @DateCreated\n    private LocalDateTime createdAt;\n\n    @DateUpdated\n    private LocalDateTime updatedAt;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public LocalDateTime getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(LocalDateTime createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public LocalDateTime getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public void setUpdatedAt(LocalDateTime updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n}\n",
      "description": "Base entity class with auditing fields for Micronaut Data"
    },
    "src/main/java/{{project_name | replace('-', '')}}/model/User.java": {
      "content": "package {{project_name | replace('-', '')}}.model;\n\nimport io.micronaut.core.annotation.Introspected;\nimport io.micronaut.data.annotation.MappedEntity;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.Size;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@MappedEntity\n@Introspected\npublic class User extends BaseEntity {\n\n    @NotBlank\n    @Size(max = 50)\n    private String username;\n\n    @NotBlank\n    @Size(max = 100)\n    @Email\n    private String email;\n\n    @NotBlank\n    @Size(max = 120)\n    private String password;\n\n    private boolean active = true;\n\n    private Set<String> roles = new HashSet<>();\n\n    public User() {}\n\n    public User(String username, String email, String password) {\n        this.username = username;\n        this.email = email;\n        this.password = password;\n    }\n\n    // Getters and Setters\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n\n    public void setActive(boolean active) {\n        this.active = active;\n    }\n\n    public Set<String> getRoles() {\n        return roles;\n    }\n\n    public void setRoles(Set<String> roles) {\n        this.roles = roles;\n    }\n}\n",
      "description": "User entity model for Micronaut"
    },
    "src/main/java/{{project_name | replace('-', '')}}/repository/UserRepository.java": {
      "content": "package {{project_name | replace('-', '')}}.repository;\n\nimport {{project_name | replace('-', '')}}.model.User;\nimport io.micronaut.data.annotation.Repository;\nimport io.micronaut.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, Long> {\n\n    Optional<User> findByUsername(String username);\n\n    Optional<User> findByEmail(String email);\n\n    boolean existsByUsername(String username);\n\n    boolean existsByEmail(String email);\n}\n",
      "description": "User repository interface for Micronaut Data"
    },
    "src/main/java/{{project_name | replace('-', '')}}/service/UserService.java": {
      "content": "package {{project_name | replace('-', '')}}.service;\n\nimport {{project_name | replace('-', '')}}.model.User;\nimport {{project_name | replace('-', '')}}.repository.UserRepository;\nimport io.micronaut.core.annotation.NonNull;\nimport jakarta.inject.Singleton;\nimport jakarta.validation.Valid;\nimport jakarta.validation.constraints.NotBlank;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Singleton\npublic class UserService {\n\n    private final UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public List<User> findAll() {\n        return (List<User>) userRepository.findAll();\n    }\n\n    public Optional<User> findById(@NonNull Long id) {\n        return userRepository.findById(id);\n    }\n\n    public Optional<User> findByUsername(@NotBlank String username) {\n        return userRepository.findByUsername(username);\n    }\n\n    public User save(@Valid @NonNull User user) {\n        return userRepository.save(user);\n    }\n\n    public void deleteById(@NonNull Long id) {\n        userRepository.deleteById(id);\n    }\n\n    public boolean existsByUsername(@NotBlank String username) {\n        return userRepository.existsByUsername(username);\n    }\n\n    public boolean existsByEmail(@NotBlank String email) {\n        return userRepository.existsByEmail(email);\n    }\n}\n",
      "description": "User service with business logic"
    },
    "src/main/java/{{project_name | replace('-', '')}}/config/CorsConfig.java": {
      "content": "package {{project_name | replace('-', '')}}.config;\n\nimport io.micronaut.context.annotation.Configuration;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Options;\nimport io.micronaut.http.HttpResponse;\nimport io.micronaut.http.MutableHttpResponse;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class CorsConfig {\n\n    @Controller\n    public static class CorsController {\n\n        @Options(\"/{path:.*}\")\n        public MutableHttpResponse<?> handleOptions(String path) {\n            return HttpResponse.ok()\n                    .header(\"Access-Control-Allow-Origin\", \"*\")\n                    .header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n                    .header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\n                    .header(\"Access-Control-Max-Age\", \"3600\");\n        }\n    }\n}\n",
      "description": "CORS configuration for Micronaut"
    },
    "src/main/resources/application.yml": {
      "content": "micronaut:\n  application:\n    name: {{project_name}}\n  server:\n    port: 8080\n    cors:\n      enabled: true\n      configurations:\n        web:\n          allowedOrigins:\n            - \"*\"\n          allowedMethods:\n            - GET\n            - POST\n            - PUT\n            - DELETE\n            - OPTIONS\n          allowedHeaders:\n            - \"*\"\n  router:\n    static-resources:\n      default:\n        enabled: true\n        mapping: \"/static/**\"\n        paths: \"classpath:static\"\n\ndatasources:\n  default:\n    url: jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE\n    driverClassName: org.h2.Driver\n    username: sa\n    password: ''\n    schema-generate: CREATE_DROP\n    dialect: H2\n\njpa:\n  default:\n    properties:\n      hibernate:\n        hbm2ddl:\n          auto: update\n        show_sql: true\n\nlogger:\n  levels:\n    {{project_name | replace('-', '')}}: INFO\n    io.micronaut.http: DEBUG\n",
      "description": "Application configuration in YAML format"
    },
    "src/test/java/{{project_name | replace('-', '')}}/ApplicationTest.java": {
      "content": "package {{project_name | replace('-', '')}};\n\nimport io.micronaut.runtime.EmbeddedApplication;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport jakarta.inject.Inject;\n\n@MicronautTest\nclass ApplicationTest {\n\n    @Inject\n    EmbeddedApplication<?> application;\n\n    @Test\n    void testItWorks() {\n        Assertions.assertTrue(application.isRunning());\n    }\n\n}\n",
      "description": "Basic Micronaut test class"
    },
    "README.md": {
      "content": "# {{project_name}}\n\nA web application built with Micronaut framework in Java.\n\n## Features\n\n- Micronaut 4.x with Java 17\n- Compile-time dependency injection\n- Built-in HTTP server (Netty)\n- Micronaut Data for data access\n- Validation with Jakarta Validation\n- H2 in-memory database for development\n- YAML configuration\n- AOT compilation support\n\n## Getting Started\n\n### Prerequisites\n\n- Java 17 or higher\n- Maven 3.6 or higher\n\n### Installation\n\n1. Clone the repository\n2. Build the application:\n   ```bash\n   mvn clean compile\n   ```\n3. Run the application:\n   ```bash\n   mvn mn:run\n   ```\n\n### API Endpoints\n\n- `GET /api/v1/` - Welcome message\n- `GET /api/v1/health` - Health check\n- `GET /api/v1/health/detailed` - Detailed health check\n\n## Project Structure\n\n```\n.\n├── src/main/java/{{project_name | replace('-', '')}}/\n│   ├── controller/          # HTTP controllers\n│   ├── service/             # Business logic services\n│   ├── model/               # Data models\n│   ├── config/              # Configuration classes\n│   ├── client/              # HTTP clients\n│   └── repository/          # Data repositories\n├── src/main/resources/      # Application configuration\n├── src/test/java/           # Unit and integration tests\n└── pom.xml                  # Maven configuration\n```\n\n## Development\n\n### Running Tests\n\n```bash\nmvn test\n```\n\n### Building for Production\n\n```bash\nmvn clean package -Dpackaging=native-image\n```\n\n### Native Image\n\nMicronaut supports GraalVM native image compilation:\n\n```bash\nmvn clean package -Dpackaging=native-image\n```\n\n## Database\n\nThe application uses H2 in-memory database by default. For production, update the `application.yml` file with your database configuration.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "description": "Project README with setup and usage instructions"
    },
    "Makefile": {
      "content": "# Makefile for {{project_name}}\n\n.PHONY: build run test clean package native\n\n# Build the application\nbuild:\n\tmvn clean compile\n\n# Run the application\nrun:\n\tmvn mn:run\n\n# Run tests\ntest:\n\tmvn test\n\n# Clean build artifacts\nclean:\n\tmvn clean\n\n# Package the application\npackage:\n\tmvn clean package\n\n# Build native image\nnative:\n\tmvn clean package -Dpackaging=native-image\n\n# Run with production profile\nrun-prod:\n\tmvn mn:run -Dmicronaut.environments=prod\n",
      "description": "Makefile with common development tasks"
    }
  },
  "dependencies": {
    "package_manager": "maven",
    "dependencies": [
      "micronaut-http-server-netty",
      "micronaut-http-client",
      "micronaut-jackson-databind",
      "micronaut-data-jdbc",
      "micronaut-jdbc-hikari",
      "micronaut-validation",
      "h2"
    ],
    "dev_dependencies": [
      "micronaut-test-junit5",
      "junit-jupiter-api",
      "junit-jupiter-engine"
    ]
  },
  "scripts": {
    "start": "mvn mn:run",
    "build": "mvn clean compile",
    "test": "mvn test",
    "package": "mvn clean package",
    "clean": "mvn clean",
    "native": "mvn clean package -Dpackaging=native-image"
  }
}
