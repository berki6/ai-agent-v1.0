{
  "name": "Spring Boot Framework",
  "description": "A powerful Java framework for building enterprise-grade applications",
  "language": "java",
  "framework": "spring-boot",
  "project_type": "web",
  "directories": [
    "src/main/java/com/{{project_name | replace('-', '')}}",
    "src/main/java/com/{{project_name | replace('-', '')}}/controller",
    "src/main/java/com/{{project_name | replace('-', '')}}/service",
    "src/main/java/com/{{project_name | replace('-', '')}}/model",
    "src/main/java/com/{{project_name | replace('-', '')}}/config",
    "src/main/java/com/{{project_name | replace('-', '')}}/exception",
    "src/main/java/com/{{project_name | replace('-', '')}}/repository",
    "src/main/java/com/{{project_name | replace('-', '')}}/dto",
    "src/main/resources",
    "src/test/java/com/{{project_name | replace('-', '')}}",
    "src/test/resources"
  ],
  "files": {
    "pom.xml": {
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.2.0</version>\n        <relativePath/>\n    </parent>\n    <groupId>com.{{project_name | replace('-', '')}}</groupId>\n    <artifactId>{{project_name}}</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>{{project_name}}</name>\n    <description>A Spring Boot application</description>\n    <properties>\n        <java.version>17</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n",
      "description": "Maven POM file with Spring Boot dependencies"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/Application.java": {
      "content": "package com.{{project_name | replace('-', '')}};\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n",
      "description": "Main Spring Boot application class"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/controller/HealthController.java": {
      "content": "package com.{{project_name | replace('-', '')}}.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/v1\")\npublic class HealthController {\n\n    @GetMapping(\"/health\")\n    public ResponseEntity<Map<String, Object>> health() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"status\", \"healthy\");\n        response.put(\"timestamp\", LocalDateTime.now());\n        response.put(\"service\", \"{{project_name}}\");\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/health/detailed\")\n    public ResponseEntity<Map<String, Object>> detailedHealth() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"status\", \"healthy\");\n        response.put(\"timestamp\", LocalDateTime.now());\n        response.put(\"service\", \"{{project_name}}\");\n        response.put(\"version\", \"1.0.0\");\n        response.put(\"javaVersion\", System.getProperty(\"java.version\"));\n        response.put(\"uptime\", Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());\n        return ResponseEntity.ok(response);\n    }\n}\n",
      "description": "Health check controller for Spring Boot"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/controller/WelcomeController.java": {
      "content": "package com.{{project_name | replace('-', '')}}.controller;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/v1\")\npublic class WelcomeController {\n\n    @GetMapping(\"/\")\n    public ResponseEntity<Map<String, Object>> welcome() {\n        Map<String, Object> response = new HashMap<>();\n        response.put(\"message\", \"Welcome to {{project_name}} API\");\n        response.put(\"framework\", \"Spring Boot\");\n        response.put(\"language\", \"Java\");\n        return ResponseEntity.ok(response);\n    }\n}\n",
      "description": "Welcome controller for Spring Boot"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/model/BaseEntity.java": {
      "content": "package com.{{project_name | replace('-', '')}}.model;\n\nimport jakarta.persistence.*;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.time.LocalDateTime;\n\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\npublic abstract class BaseEntity {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @CreatedDate\n    @Column(name = \"created_at\", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n\n    @LastModifiedDate\n    @Column(name = \"updated_at\")\n    private LocalDateTime updatedAt;\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public LocalDateTime getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(LocalDateTime createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public LocalDateTime getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public void setUpdatedAt(LocalDateTime updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n}\n",
      "description": "Base entity class with auditing fields"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/model/User.java": {
      "content": "package com.{{project_name | replace('-', '')}}.model;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.Size;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"users\")\npublic class User extends BaseEntity {\n\n    @NotBlank\n    @Size(max = 50)\n    @Column(unique = true)\n    private String username;\n\n    @NotBlank\n    @Size(max = 100)\n    @Email\n    @Column(unique = true)\n    private String email;\n\n    @NotBlank\n    @Size(max = 120)\n    private String password;\n\n    @Column(nullable = false)\n    private Boolean active = true;\n\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"user_roles\", joinColumns = @JoinColumn(name = \"user_id\"))\n    @Column(name = \"role\")\n    private Set<String> roles = new HashSet<>();\n\n    public User() {}\n\n    public User(String username, String email, String password) {\n        this.username = username;\n        this.email = email;\n        this.password = password;\n    }\n\n    // Getters and Setters\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Boolean getActive() {\n        return active;\n    }\n\n    public void setActive(Boolean active) {\n        this.active = active;\n    }\n\n    public Set<String> getRoles() {\n        return roles;\n    }\n\n    public void setRoles(Set<String> roles) {\n        this.roles = roles;\n    }\n}\n",
      "description": "User entity model"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/dto/ApiResponse.java": {
      "content": "package com.{{project_name | replace('-', '')}}.dto;\n\nimport java.time.LocalDateTime;\n\npublic class ApiResponse<T> {\n    private boolean success;\n    private String message;\n    private T data;\n    private LocalDateTime timestamp;\n\n    public ApiResponse() {\n        this.timestamp = LocalDateTime.now();\n    }\n\n    public ApiResponse(boolean success, String message, T data) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n        this.timestamp = LocalDateTime.now();\n    }\n\n    public static <T> ApiResponse<T> success(T data) {\n        return new ApiResponse<>(true, \"Operation successful\", data);\n    }\n\n    public static <T> ApiResponse<T> success(String message, T data) {\n        return new ApiResponse<>(true, message, data);\n    }\n\n    public static <T> ApiResponse<T> error(String message) {\n        return new ApiResponse<>(false, message, null);\n    }\n\n    // Getters and Setters\n    public boolean isSuccess() {\n        return success;\n    }\n\n    public void setSuccess(boolean success) {\n        this.success = success;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public LocalDateTime getTimestamp() {\n        return timestamp;\n    }\n\n    public void setTimestamp(LocalDateTime timestamp) {\n        this.timestamp = timestamp;\n    }\n}\n",
      "description": "Generic API response DTO"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/config/WebConfig.java": {
      "content": "package com.{{project_name | replace('-', '')}}.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/api/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true);\n    }\n}\n",
      "description": "Web configuration for CORS and other settings"
    },
    "src/main/java/com/{{project_name | replace('-', '')}}/exception/GlobalExceptionHandler.java": {
      "content": "package com.{{project_name | replace('-', '')}}.exception;\n\nimport com.{{project_name | replace('-', '')}}.dto.ApiResponse;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<ApiResponse<Map<String, String>>> handleValidationExceptions(\n            MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            errors.put(fieldName, errorMessage);\n        });\n        return ResponseEntity.badRequest()\n                .body(ApiResponse.error(\"Validation failed\"));\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<ApiResponse<Void>> handleGlobalException(Exception ex) {\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"An unexpected error occurred\"));\n    }\n}\n",
      "description": "Global exception handler for Spring Boot"
    },
    "src/main/resources/application.properties": {
      "content": "# Server Configuration\nserver.port=8080\n\n# Database Configuration\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\n\n# Logging\nlogging.level.com.{{project_name | replace('-', '')}}=INFO\nlogging.level.org.springframework.web=DEBUG\n\n# Actuator\nmanagement.endpoints.web.exposure.include=health,info,metrics\nmanagement.endpoint.health.show-details=always\n",
      "description": "Application properties configuration"
    },
    "src/test/java/com/{{project_name | replace('-', '')}}/ApplicationTests.java": {
      "content": "package com.{{project_name | replace('-', '')}};\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ApplicationTests {\n\n    @Test\n    void contextLoads() {\n    }\n\n}\n",
      "description": "Basic Spring Boot test class"
    },
    "README.md": {
      "content": "# {{project_name}}\n\nA web application built with Spring Boot framework in Java.\n\n## Features\n\n- Spring Boot 3.x with Java 17\n- RESTful API with Spring Web\n- JPA/Hibernate for data persistence\n- Validation with Bean Validation\n- Global exception handling\n- CORS configuration\n- Actuator for monitoring\n- H2 in-memory database for development\n\n## Getting Started\n\n### Prerequisites\n\n- Java 17 or higher\n- Maven 3.6 or higher\n\n### Installation\n\n1. Clone the repository\n2. Build the application:\n   ```bash\n   mvn clean install\n   ```\n3. Run the application:\n   ```bash\n   mvn spring-boot:run\n   ```\n\n### API Endpoints\n\n- `GET /api/v1/` - Welcome message\n- `GET /api/v1/health` - Health check\n- `GET /api/v1/health/detailed` - Detailed health check\n- `GET /actuator/health` - Spring Boot Actuator health\n\n## Project Structure\n\n```\n.\n├── src/main/java/com/{{project_name | replace('-', '')}}/\n│   ├── controller/          # REST controllers\n│   ├── service/             # Business logic services\n│   ├── model/               # JPA entities\n│   ├── dto/                 # Data transfer objects\n│   ├── config/              # Configuration classes\n│   ├── exception/           # Exception handlers\n│   └── repository/          # Data repositories\n├── src/main/resources/      # Application properties\n├── src/test/java/           # Unit and integration tests\n└── pom.xml                  # Maven configuration\n```\n\n## Development\n\n### Running Tests\n\n```bash\nmvn test\n```\n\n### Building for Production\n\n```bash\nmvn clean package -DskipTests\n```\n\n### Code Formatting\n\n```bash\nmvn spotless:apply\n```\n\n## Database\n\nThe application uses H2 in-memory database by default. For production, update the `application.properties` file with your database configuration.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "description": "Project README with setup and usage instructions"
    },
    "Makefile": {
      "content": "# Makefile for {{project_name}}\n\n.PHONY: build run test clean package docker-build docker-run\n\n# Build the application\nbuild:\n\tmvn clean compile\n\n# Run the application\nrun:\n\tmvn spring-boot:run\n\n# Run tests\ntest:\n\tmvn test\n\n# Clean build artifacts\nclean:\n\tmvn clean\n\n# Package the application\npackage:\n\tmvn clean package -DskipTests\n\n# Run with production profile\nrun-prod:\n\tmvn spring-boot:run -Dspring-boot.run.profiles=prod\n\n# Docker commands\ndocker-build:\n\tdocker build -t {{project_name}}:latest .\n\ndocker-run:\n\tdocker run -p 8080:8080 {{project_name}}:latest\n",
      "description": "Makefile with common development tasks"
    }
  },
  "dependencies": {
    "package_manager": "maven",
    "dependencies": [
      "spring-boot-starter-web",
      "spring-boot-starter-data-jpa",
      "spring-boot-starter-validation",
      "spring-boot-starter-actuator",
      "h2"
    ],
    "dev_dependencies": ["spring-boot-starter-test"]
  },
  "scripts": {
    "start": "mvn spring-boot:run",
    "build": "mvn clean compile",
    "test": "mvn test",
    "package": "mvn clean package",
    "clean": "mvn clean"
  }
}
