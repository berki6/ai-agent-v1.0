"""
APimport json
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field

from ...utils.ai_utils import AIUtilsentation Manager for Scaffolder

This module provides comprehensive API documentation generation capabilities for scaffolded projects,
including OpenAPI/Swagger specifications, interactive documentation, and multiple output formats.
"""

import json
from pathlib import Path
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field

from ...core.ai_utils import AIUtils
from enum import Enum


class DocumentationFormat(str, Enum):
    """Supported API documentation formats"""
    OPENAPI_JSON = "openapi_json"
    OPENAPI_YAML = "openapi_yaml"
    SWAGGER_JSON = "swagger_json"
    SWAGGER_YAML = "swagger_yaml"
    POSTMAN_COLLECTION = "postman_collection"
    INSOMNIA_COLLECTION = "insomnia_collection"


class DocumentationTool(str, Enum):
    """Supported API documentation tools"""
    SWAGGER_UI = "swagger_ui"
    REDOC = "redoc"
    RAPIDOC = "rapidoc"
    ELEMENTS = "elements"
    STOPLIGHT = "stoplight"


class APIFramework(str, Enum):
    """Supported API frameworks"""
    FASTAPI = "fastapi"
    FLASK = "flask"
    DJANGO_REST = "django_rest"
    EXPRESS = "express"
    NESTJS = "nestjs"
    SPRING_BOOT = "spring_boot"


class DocumentationFeature(str, Enum):
    """API documentation features"""
    INTERACTIVE_DOCS = "interactive_docs"
    SCHEMA_VALIDATION = "schema_validation"
    AUTHENTICATION_DOCS = "authentication_docs"
    ERROR_RESPONSES = "error_responses"
    EXAMPLES = "examples"
    MOCK_SERVERS = "mock_servers"


class APIEndpoint(BaseModel):
    """API endpoint model"""
    path: str = Field(description="API endpoint path")
    method: str = Field(description="HTTP method")
    summary: str = Field(description="Endpoint summary")
    description: str = Field(description="Endpoint description")
    tags: List[str] = Field(default_factory=list, description="Endpoint tags")
    parameters: List[Dict[str, Any]] = Field(default_factory=list, description="Query/path parameters")
    request_body: Optional[Dict[str, Any]] = Field(default=None, description="Request body schema")
    responses: Dict[str, Dict[str, Any]] = Field(default_factory=dict, description="Response schemas")


class APIDocumentationManager:
    """
    Manager for API documentation generation and setup
    """

    def __init__(self):
        self.ai_utils = AIUtils()

    async def generate_api_documentation(
        self,
        project_path: Path,
        language: str,
        framework: Optional[str] = None,
        features: Optional[List[str]] = None,
        api_framework: APIFramework = APIFramework.FASTAPI,
        documentation_formats: Optional[List[DocumentationFormat]] = None,
        documentation_tools: Optional[List[DocumentationTool]] = None,
        documentation_features: Optional[List[DocumentationFeature]] = None,
        api_endpoints: Optional[List[APIEndpoint]] = None,
        api_title: str = "API Documentation",
        api_version: str = "1.0.0",
        api_description: str = "API documentation generated by Scaffolder",
    ) -> Dict[str, Any]:
        """
        Generate comprehensive API documentation setup

        Args:
            project_path: Path to the project root
            language: Programming language (python, javascript, etc.)
            framework: Web framework being used
            features: List of project features
            api_framework: API framework being used
            documentation_formats: List of documentation formats to generate
            documentation_tools: List of documentation tools to include
            documentation_features: List of documentation features to enable
            api_endpoints: List of API endpoints to document
            api_title: API documentation title
            api_version: API version
            api_description: API description

        Returns:
            Dictionary containing generated documentation files and configurations
        """

        # Set defaults based on framework
        if documentation_formats is None:
            documentation_formats = [
                DocumentationFormat.OPENAPI_JSON,
                DocumentationFormat.OPENAPI_YAML,
            ]

        if documentation_tools is None:
            if api_framework == APIFramework.FASTAPI:
                documentation_tools = [DocumentationTool.SWAGGER_UI, DocumentationTool.REDOC]
            else:
                documentation_tools = [DocumentationTool.SWAGGER_UI]

        if documentation_features is None:
            documentation_features = [
                DocumentationFeature.INTERACTIVE_DOCS,
                DocumentationFeature.SCHEMA_VALIDATION,
                DocumentationFeature.ERROR_RESPONSES,
                DocumentationFeature.EXAMPLES,
            ]

        if api_endpoints is None:
            api_endpoints = self._get_default_endpoints()

        # Generate documentation files
        generated_files = {}

        # Generate OpenAPI/Swagger specifications
        spec_files = await self._generate_openapi_specs(
            project_path, api_framework, documentation_formats, api_endpoints,
            api_title, api_version, api_description
        )
        generated_files.update(spec_files)

        # Generate documentation UI setup
        ui_files = await self._generate_documentation_ui(
            project_path, language, api_framework, documentation_tools
        )
        generated_files.update(ui_files)

        # Generate documentation utilities
        utility_files = await self._generate_documentation_utilities(
            project_path, language, api_framework, documentation_features
        )
        generated_files.update(utility_files)

        # Generate framework-specific documentation
        framework_files = await self._generate_framework_documentation(
            project_path, language, api_framework, api_endpoints
        )
        generated_files.update(framework_files)

        return generated_files

    async def _generate_openapi_specs(
        self,
        project_path: Path,
        api_framework: APIFramework,
        formats: List[DocumentationFormat],
        endpoints: List[APIEndpoint],
        title: str,
        version: str,
        description: str,
    ) -> Dict[str, Any]:
        """Generate OpenAPI/Swagger specifications"""

        files = {}

        # Create OpenAPI specification
        openapi_spec = {
            "openapi": "3.0.3",
            "info": {
                "title": title,
                "version": version,
                "description": description,
            },
            "servers": [
                {"url": "http://localhost:8000", "description": "Development server"},
                {"url": "https://api.example.com", "description": "Production server"},
            ],
            "paths": {},
            "components": {
                "schemas": {},
                "securitySchemes": {
                    "bearerAuth": {
                        "type": "http",
                        "scheme": "bearer",
                        "bearerFormat": "JWT"
                    }
                }
            },
            "security": [{"bearerAuth": []}],
        }

        # Add endpoints to specification
        for endpoint in endpoints:
            if endpoint.path not in openapi_spec["paths"]:
                openapi_spec["paths"][endpoint.path] = {}

            method_spec = {
                "summary": endpoint.summary,
                "description": endpoint.description,
                "tags": endpoint.tags,
                "responses": endpoint.responses,
            }

            if endpoint.parameters:
                method_spec["parameters"] = endpoint.parameters

            if endpoint.request_body:
                method_spec["requestBody"] = endpoint.request_body

            openapi_spec["paths"][endpoint.path][endpoint.method.lower()] = method_spec

        # Generate different formats
        for doc_format in formats:
            if doc_format == DocumentationFormat.OPENAPI_JSON:
                files["docs/openapi.json"] = json.dumps(openapi_spec, indent=2)
            elif doc_format == DocumentationFormat.OPENAPI_YAML:
                import yaml
                files["docs/openapi.yaml"] = yaml.dump(openapi_spec, default_flow_style=False)
            elif doc_format == DocumentationFormat.SWAGGER_JSON:
                swagger_spec = self._convert_to_swagger(openapi_spec)
                files["docs/swagger.json"] = json.dumps(swagger_spec, indent=2)
            elif doc_format == DocumentationFormat.SWAGGER_YAML:
                import yaml
                swagger_spec = self._convert_to_swagger(openapi_spec)
                files["docs/swagger.yaml"] = yaml.dump(swagger_spec, default_flow_style=False)
            elif doc_format == DocumentationFormat.POSTMAN_COLLECTION:
                postman_collection = self._convert_to_postman(openapi_spec, title, description)
                files["docs/postman_collection.json"] = json.dumps(postman_collection, indent=2)

        return files

    async def _generate_documentation_ui(
        self,
        project_path: Path,
        language: str,
        api_framework: APIFramework,
        tools: List[DocumentationTool],
    ) -> Dict[str, Any]:
        """Generate documentation UI setup"""

        files = {}

        if language.lower() == "python":
            if api_framework == APIFramework.FASTAPI:
                # FastAPI already includes Swagger UI and ReDoc
                pass  # No additional files needed
            else:
                # Generate static documentation pages
                for tool in tools:
                    if tool == DocumentationTool.SWAGGER_UI:
                        files["docs/swagger-ui.html"] = self._get_swagger_ui_html()
                    elif tool == DocumentationTool.REDOC:
                        files["docs/redoc.html"] = self._get_redoc_html()
                    elif tool == DocumentationTool.RAPIDOC:
                        files["docs/rapidoc.html"] = self._get_rapidoc_html()

        elif language.lower() == "javascript":
            # Generate Node.js documentation setup
            if DocumentationTool.SWAGGER_UI in tools:
                package_json_addition = {
                    "dependencies": {
                        "swagger-ui-express": "^4.6.0",
                        "swagger-jsdoc": "^6.2.8"
                    }
                }
                files["docs/swagger-setup.js"] = self._get_nodejs_swagger_setup()

        return files

    async def _generate_documentation_utilities(
        self,
        project_path: Path,
        language: str,
        api_framework: APIFramework,
        features: List[DocumentationFeature],
    ) -> Dict[str, Any]:
        """Generate documentation utilities"""

        files = {}

        if language.lower() == "python":
            utilities_content = '''"""
API Documentation Utilities
Auto-generated by Scaffolder API Documentation Manager
"""

from typing import Any, Dict, List, Optional
import json
from pathlib import Path


class APIDocumentationUtils:
    """API documentation utility functions"""

    @staticmethod
    def load_openapi_spec(spec_path: str) -> Dict[str, Any]:
        """Load OpenAPI specification from file"""
        with open(spec_path, 'r') as f:
            if spec_path.endswith('.yaml') or spec_path.endswith('.yml'):
                import yaml
                return yaml.safe_load(f)
            else:
                return json.load(f)

    @staticmethod
    def validate_openapi_spec(spec: Dict[str, Any]) -> List[str]:
        """Validate OpenAPI specification"""
        errors = []

        # Basic validation
        if "openapi" not in spec:
            errors.append("Missing 'openapi' version field")

        if "info" not in spec:
            errors.append("Missing 'info' section")
        elif "title" not in spec["info"]:
            errors.append("Missing 'info.title' field")

        if "paths" not in spec:
            errors.append("Missing 'paths' section")

        return errors

    @staticmethod
    def generate_example_requests(spec: Dict[str, Any]) -> Dict[str, str]:
        """Generate example API requests from OpenAPI spec"""
        examples = {}

        if "paths" in spec:
            for path, methods in spec["paths"].items():
                for method, details in methods.items():
                    if "summary" in details:
                        examples[f"{method.upper()} {path}"] = details["summary"]

        return examples

    @staticmethod
    def extract_endpoints(spec: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract endpoint information from OpenAPI spec"""
        endpoints = []

        if "paths" in spec:
            for path, methods in spec["paths"].items():
                for method, details in methods.items():
                    endpoint = {
                        "path": path,
                        "method": method.upper(),
                        "summary": details.get("summary", ""),
                        "description": details.get("description", ""),
                        "tags": details.get("tags", []),
                    }
                    endpoints.append(endpoint)

        return endpoints


# Global documentation utilities instance
api_docs_utils = APIDocumentationUtils()
'''

            files["src/utils/api_documentation.py"] = utilities_content

            # Generate documentation configuration
            config_content = '''"""
API Documentation Configuration
Auto-generated by Scaffolder API Documentation Manager
"""

from pydantic import BaseSettings


class APIDocumentationSettings(BaseSettings):
    """API documentation settings"""

    # Documentation settings
    API_DOCS_ENABLED: bool = True
    API_DOCS_PATH: str = "/docs"
    API_REDOC_PATH: str = "/redoc"
    API_OPENAPI_PATH: str = "/openapi.json"

    # Swagger UI settings
    SWAGGER_UI_ENABLED: bool = True
    SWAGGER_UI_TITLE: str = "API Documentation"

    # ReDoc settings
    REDOC_ENABLED: bool = True
    REDOC_TITLE: str = "API Documentation"

    class Config:
        env_file = ".env"
        case_sensitive = False


# Global API documentation settings
api_docs_settings = APIDocumentationSettings()
'''

            files["src/config/api_documentation.py"] = config_content

        return files

    async def _generate_framework_documentation(
        self,
        project_path: Path,
        language: str,
        api_framework: APIFramework,
        endpoints: List[APIEndpoint],
    ) -> Dict[str, Any]:
        """Generate framework-specific documentation"""

        files = {}

        if language.lower() == "python":
            if api_framework == APIFramework.FASTAPI:
                # Generate FastAPI documentation setup
                docs_setup = '''"""
FastAPI Documentation Setup
Auto-generated by Scaffolder API Documentation Manager
"""

from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi
from fastapi.middleware.cors import CORSMiddleware

from ..config.api_documentation import api_docs_settings


def setup_api_documentation(app: FastAPI, title: str, version: str, description: str):
    """Setup API documentation for FastAPI application"""

    # Add CORS middleware for documentation access
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Custom OpenAPI schema generation
    def custom_openapi():
        if app.openapi_schema:
            return app.openapi_schema

        openapi_schema = get_openapi(
            title=title,
            version=version,
            description=description,
            routes=app.routes,
        )

        # Add security schemes
        openapi_schema["components"]["securitySchemes"] = {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }

        # Add global security
        openapi_schema["security"] = [{"bearerAuth": []}]

        app.openapi_schema = openapi_schema
        return app.openapi_schema

    # Override the default OpenAPI schema generation
    app.openapi = custom_openapi

    # Enable documentation endpoints
    if api_docs_settings.SWAGGER_UI_ENABLED:
        # Swagger UI is automatically available at /docs

    if api_docs_settings.REDOC_ENABLED:
        # ReDoc is automatically available at /redoc

    print(f"API documentation available at:")
    print(f"  Swagger UI: http://localhost:8000{api_docs_settings.API_DOCS_PATH}")
    print(f"  ReDoc: http://localhost:8000{api_docs_settings.API_REDOC_PATH}")
    print(f"  OpenAPI JSON: http://localhost:8000{api_docs_settings.API_OPENAPI_PATH}")
'''

                files["src/docs/fastapi_setup.py"] = docs_setup

        return files

    def _convert_to_swagger(self, openapi_spec: Dict[str, Any]) -> Dict[str, Any]:
        """Convert OpenAPI 3.0 spec to Swagger 2.0"""
        # Simplified conversion - in practice, you'd use a proper converter
        swagger_spec = {
            "swagger": "2.0",
            "info": openapi_spec.get("info", {}),
            "host": "localhost:8000",
            "basePath": "/",
            "schemes": ["http", "https"],
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "paths": openapi_spec.get("paths", {}),
            "definitions": {},
        }

        # Convert components to definitions
        if "components" in openapi_spec and "schemas" in openapi_spec["components"]:
            swagger_spec["definitions"] = openapi_spec["components"]["schemas"]

        return swagger_spec

    def _convert_to_postman(self, openapi_spec: Dict[str, Any], title: str, description: str) -> Dict[str, Any]:
        """Convert OpenAPI spec to Postman collection"""
        collection = {
            "info": {
                "name": title,
                "description": description,
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
            },
            "item": [],
            "variable": [
                {"key": "baseUrl", "value": "http://localhost:8000", "type": "string"}
            ]
        }

        # Convert paths to Postman requests
        if "paths" in openapi_spec:
            for path, methods in openapi_spec["paths"].items():
                for method, details in methods.items():
                    request = {
                        "name": details.get("summary", f"{method.upper()} {path}"),
                        "request": {
                            "method": method.upper(),
                            "header": [
                                {"key": "Content-Type", "value": "application/json"}
                            ],
                            "url": {
                                "raw": "{{baseUrl}}" + path,
                                "host": ["{{baseUrl}}"],
                                "path": path.split("/")[1:]  # Remove leading slash and split
                            }
                        }
                    }
                    collection["item"].append(request)

        return collection

    def _get_default_endpoints(self) -> List[APIEndpoint]:
        """Get default API endpoints for documentation"""
        return [
            APIEndpoint(
                path="/health",
                method="get",
                summary="Health Check",
                description="Check if the API is healthy",
                tags=["Health"],
                responses={
                    "200": {
                        "description": "API is healthy",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {"type": "string", "example": "healthy"}
                                    }
                                }
                            }
                        }
                    }
                }
            ),
            APIEndpoint(
                path="/users",
                method="get",
                summary="List Users",
                description="Get a list of users",
                tags=["Users"],
                responses={
                    "200": {
                        "description": "List of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {"type": "integer"},
                                            "email": {"type": "string"},
                                            "username": {"type": "string"}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ),
            APIEndpoint(
                path="/users",
                method="post",
                summary="Create User",
                description="Create a new user",
                tags=["Users"],
                request_body={
                    "required": True,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email", "username", "password"],
                                "properties": {
                                    "email": {"type": "string", "format": "email"},
                                    "username": {"type": "string"},
                                    "password": {"type": "string", "minLength": 8}
                                }
                            }
                        }
                    }
                },
                responses={
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {"type": "integer"},
                                        "email": {"type": "string"},
                                        "username": {"type": "string"}
                                    }
                                }
                            }
                        }
                    }
                }
            )
        ]

    def _get_swagger_ui_html(self) -> str:
        """Get Swagger UI HTML template"""
        return '''<!DOCTYPE html>
<html>
<head>
    <title>API Documentation - Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui.css" />
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin:0;
            background: #fafafa;
        }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui-bundle.js"></script>
    <script src="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function() {
            const ui = SwaggerUIBundle({
                url: '/openapi.json',
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
            });
        };
    </script>
</body>
</html>'''

    def _get_redoc_html(self) -> str:
        """Get ReDoc HTML template"""
        return '''<!DOCTYPE html>
<html>
<head>
    <title>API Documentation - ReDoc</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">
    <style>
        body {
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    <redoc spec-url='/openapi.json'></redoc>
    <script src="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"></script>
</body>
</html>'''

    def _get_rapidoc_html(self) -> str:
        """Get RapiDoc HTML template"""
        return '''<!DOCTYPE html>
<html>
<head>
    <title>API Documentation - RapiDoc</title>
    <meta charset="utf-8"/>
    <script type="module" src="https://unpkg.com/rapidoc@9.3.4/dist/rapidoc-min.js"></script>
</head>
<body>
    <rapi-doc
        spec-url="/openapi.json"
        theme="light"
        show-header="true"
        allow-authentication="true"
        allow-server-selection="true"
        allow-api-list-style-selection="true"
    ></rapi-doc>
</body>
</html>'''

    def _get_nodejs_swagger_setup(self) -> str:
        """Get Node.js Swagger setup code"""
        return '''/**
 * Swagger Documentation Setup
 * Auto-generated by Scaffolder API Documentation Manager
 */

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const swaggerDefinition = {
  openapi: '3.0.0',
  info: {
    title: 'API Documentation',
    version: '1.0.0',
    description: 'API documentation generated by Scaffolder',
  },
  servers: [
    {
      url: 'http://localhost:3000',
      description: 'Development server',
    },
  ],
};

const options = {
  swaggerDefinition,
  apis: ['./routes/*.js', './controllers/*.js'], // Paths to files containing OpenAPI definitions
};

const swaggerSpec = swaggerJsdoc(options);

function setupSwagger(app) {
  // Swagger page
  app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // Docs in JSON format
  app.get('/docs.json', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.send(swaggerSpec);
  });

  console.log('API documentation available at:');
  console.log('  Swagger UI: http://localhost:3000/docs');
  console.log('  OpenAPI JSON: http://localhost:3000/docs.json');
}

module.exports = { setupSwagger, swaggerSpec };
'''